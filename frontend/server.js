const express = require('express');
const bodyParser = require('body-parser');
const fs = require('fs');
const cors = require('cors'); // Importez le module CORS

const app = express();
const PORT = process.env.PORT || 5000;

// Middleware
app.use(bodyParser.json());
app.use(cors()); // Utilisez CORS middleware pour toutes les routes

// Chemin vers le fichier JSON de stockage des utilisateurs
const usersFilePath = './users.json';

// Créer le fichier JSON s'il n'existe pas
if (!fs.existsSync(usersFilePath)) {
  fs.writeFileSync(usersFilePath, '[]');
}

// Fonction pour lire les utilisateurs depuis le fichier JSON
const readUsersFromFile = () => {
  const usersData = fs.readFileSync(usersFilePath);
  return JSON.parse(usersData);
};

// Fonction pour écrire les utilisateurs dans le fichier JSON
const writeUsersToFile = (users) => {
  fs.writeFileSync(usersFilePath, JSON.stringify(users, null, 2));
};

// Routes
app.post('/api/login', (req, res) => {
  const { username, password } = req.body;
  // Vérifier si l'utilisateur existe
  const users = readUsersFromFile();
  const user = users.find((user) => user.username === username && user.password === password);
  if (user) {
    // Utilisateur trouvé, authentification réussie
    res.json({ message: 'Login successful', user });
  } else {
    // Aucun utilisateur trouvé avec ces informations
    res.status(401).json({ message: 'Invalid username or password' });
  }
});

app.post('/api/register', (req, res) => {
  const { username, password } = req.body;
  // Vérifier si l'utilisateur existe déjà
  const users = readUsersFromFile();
  const existingUser = users.find((user) => user.username === username);
  if (existingUser) {
    return res.status(400).json({ message: 'Username already registered' });
  }
  // Ajouter le nouvel utilisateur
  const newUser = { username, password };
  users.push(newUser);
  writeUsersToFile(users);
  res.json({ message: 'User registered successfully' });
});

// Lancer le serveur
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});
